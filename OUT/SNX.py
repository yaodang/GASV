#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Mar 15 14:39:09 2023

@author: yaodang
"""

import os,datetime
from COMMON.time_transfer import *

def writeSNX(param, scanInfo, sourceInfo, stationInfo, eopApri, result, out):
    """
    Creat the SNX file
    ---------------------
    input:
        param         : 
        scanInfo      : scan struct
        sourceInfo    : 
        stationInfo   : 
    output: 
        save the SNX file
    ---------------------
    """
    if param.Out.snxPath[0] == 'NO':
        return
    
    print('    write the snx file......')
    [year, mon, day, hour, minute, second] = mjd2ymdhms(scanInfo.scanMJD[0])
    snxPath = os.path.join(param.Out.snxPath[1],str(year))
    if not os.path.exists(snxPath):
        os.mkdir(snxPath)

    if sum(out.estFlag) == 0:
        print('        No EOP or XYZ or Source to be estimate!\n')
        return
    
    time = datetime.datetime.now()
    runDay = date2doy(time.year, time.month, time.day)
    seconds = int(time.hour*3600 + time.minute*60 + time.second)
        
    fid = open(os.path.join(snxPath, scanInfo.sessionName+'.snx'),'w')
    fid.writelines("%%=SNX 2.10 XXX %2d:%03d:%5d\n"%(time.year-2000, runDay, seconds))
    fid.writelines('*\n'+\
                   '* Created on:   %4d.%02d.%02d-%02d:%02d:%02d local time\n'\
                       %(time.year,time.month,time.day,time.hour,time.minute,int(time.second))+\
                   #'* Created at:   Yao Dang\n'+\
                   '* Created by:     (   )\n'+\
                   '* Generated by: routine writeSNX\n'+\
                   '*\n'+\
                   '* -----------------------------------------------------------------------------\n'+\
                   '*\n'+\
                   '+FILE/REFERENCE\n'+\
                   #' DESCRIPTION       YAO\n'+\
                   #' OUTPUT            Single session VLBI solution\n'+\
                   ' CONTACT             < >\n'+\
                   ' SOFTWARE          Geodestic Analysis Toools for VLBI\n'+\
                   ' HARDWARE          Linux\n'+\
                   ' INPUT             VLBI experiment q22149, database $%s version 004\n'%(scanInfo.sessionName)+\
                   '-FILE/REFERENCE\n'+\
                   '*\n'+\
                   '* -----------------------------------------------------------------------------\n'+\
                   '*\n'+\
                   '+FILE/COMMENT\n'+\
                   '-FILE/COMMENT\n'+\
                   '*\n'+\
                   '* -----------------------------------------------------------------------------\n'+\
                   '*\n'+\
                   '+INPUT/ACKNOWLEDGEMENTS\n'+\
                   ' Yao  Yao Observatory, VLBI analysis group\n'+\
                   '-INPUT/ACKNOWLEDGEMENTS\n'+\
                   '*\n'+\
                   '* -----------------------------------------------------------------------------\n'+\
                   '*\n'+\
                   '+SITE/ID\n'+\
                   '*Code PT Domes____ T Station description___ Approx_lon_ Approx_lat_ App_h__\n')
            
    for i in range(len(out.nscode)):
        fid.writelines(' %s  A %s R %-8s\n'%(out.nscode[i][0],out.nscode[i][1],out.nscode[i][2]))
        
    # SOURCE/ID    
    fid.writelines('-SITE/ID\n'+\
                   '*\n'+\
                   '* -----------------------------------------------------------------------------\n'+\
                   '*\n'+\
                   '+SOURCE/ID\n'+\
                   '*Code IERS nam ICRF designator  IAU name   IVS name\n')

    for i in range(len(out.souName)):
        if  out.souName[i] in sourceInfo.sourceName:
            index = sourceInfo.sourceName.index(out.souName[i])
        else:
            index = sourceInfo.ivsName.index(out.souName[i])
        fid.writelines(' %04d %-8s %-16s %-10s %-8s\n'%(i+1,sourceInfo.sourceName[index],sourceInfo.icfName[index],\
                                                        sourceInfo.iauName[index],sourceInfo.ivsName[index]))

    
    # SOLUTION/EPOCHS    
    blank ='        ' 

    fid.writelines('-SOURCE/ID\n'+\
                   '*\n'+\
                   '* -----------------------------------------------------------------------------\n'+\
                   '*\n'+\
                   '+SOLUTION/EPOCHS\n'+\
                   '*Code PT SBIN T Data_start__ Data_end____ Mean_epoch__\n')
            
    xyzP = out.param.index('xyz') - len(out.param)        
    for i in range(len(out.nscode)):
        fid.writelines(' %s  A    1 R %2s:%03d:%05d %2s:%03d:%05d %2s:%03d:%05d\n'\
                       %(out.nscode[i][0],str(out.mjd[xyzP][i][0])[2:4],out.mjd[xyzP][i][1],out.mjd[xyzP][i][2],\
                                          str(out.mjd[xyzP][i][3])[2:4],out.mjd[xyzP][i][4],out.mjd[xyzP][i][5],\
                                          str(out.mjd[xyzP][i][6])[2:4],out.mjd[xyzP][i][7],out.mjd[xyzP][i][8]))
        
    # NUTATION/DATA  PRECESSION/DATA
    fid.writelines('-SOLUTION/EPOCHS\n'+\
                   '*\n'+\
                   '* -----------------------------------------------------------------------------\n'+\
                   '*\n'+\
                   '+NUTATION/DATA\n'+\
                   ' IAU2006/2000 Precession/Nutation apriori nutation modelwas used\n'+\
                   ' NONE     REF Total nutation angles are reported in estimation block\n'+\
                   '-NUTATION/DATA\n'+\
                   '*\n'+\
                   '* -----------------------------------------------------------------------------\n'+\
                   '*\n'+\
                   '+PRECESSION/DATA\n'+\
                   ' CAPITAINE2003 apriori precession constant and obliquity rates were used \n'+\
                   '-PRECESSION/DATA\n'+\
                   '*\n'+\
                   '* -----------------------------------------------------------------------------\n'+\
                   '*\n'+\
                   '+SOLUTION/STATISTICS\n'+\
                   '* Units for WRMS: sec\n')
        
    # SOLUTION/STATISTICS
    ocStr = '%16.14E'%(np.dot(np.dot(result.o_creal.T,result.preal),result.o_creal))
    VTPVStr = '%16.14E'%(result.vTPv)
    chiStr = '%16.14E'%(result.chis)
    wrmsStr = '%16.14E'%(result.wrms*1E-12)
    
    if len(scanInfo.baseInfo[0]) == 2:
        obsNum = result.VReal[1].shape[0]
    elif len(scanInfo.baseInfo[0]) == 1:
        obsNum = result.VReal[0].shape[0]
    fid.writelines(' NUMBER OF OBSERVATIONS          %11d\n'%(result.Ablk.shape[0])+\
                   ' NUMBER OF UNKNOWNS              %11d\n'%(result.N.shape[0])+\
                   ' WEIGHTED SQUARE SUM OF O-C      %20s\n'%(ocStr.replace('E','D'))+\
                   ' SQUARE SUM OF RESIDUALS (VTPV)  %20s\n'%(VTPVStr.replace('E','D'))+\
                   ' VARIANCE FACTOR                 %20s\n'%(chiStr.replace('E','D'))+\
                   ' WRMS OF POSTFIT RESIDUALS       %20s\n'%(wrmsStr.replace('E','D'))+\
                   '-SOLUTION/STATISTICS\n'+\
                   '*\n* -----------------------------------------------------------------------------\n'+\
                   '*\n+SOLUTION/APRIORI\n'+\
                   '*Index Type__ CODE PT SBIN Ref_epoch___ Unit S Apriori_value________ Constraint_\n')
    
    # SOLUTION/APRIORI
    
    
    snum = 0
    estParamP = np.where(out.estFlag[:xyzP] == 1)
    for i in range(len(estParamP[0])):
        for j in range(len(out.mjd[estParamP[0][i]])):
            eopy,eopm,eopd,eoph,eopmi,eops = mjd2date(out.mjd[estParamP[0][i]][j])
            eopdoy = date2doy(eopy,eopm,eopd)
            eopSec = (out.mjd[estParamP[0][i]][j]-int(out.mjd[estParamP[0][i]][j]))*86400
            
            paramStr = '%17.14E'%(out.aprioriValue[estParamP[0][i]][j])        
            fid.writelines('%6d %-5s  ----  -    1 %2s:%03d:%05d %-4s 2 %21s 0.00000D+00\n'\
                           %(snum+1, out.snxName[estParamP[0][i]], str(eopy)[2:4],eopdoy,eopSec, out.unit[estParamP[0][i]], paramStr.replace('E','D')))
            snum += 1
            

    if param.Flags.xyz[0] == 'YES':
        xyzStr = ['STAX','STAY','STAZ']
        
        for i in range(len(out.nscode)):
            for j in range(3):
                posit = '%17.14E'%(out.aprioriValue[xyzP][i,j])
                fid.writelines('%6d %s   %4s  A    1 %2s:%03d:%05d m    2 %21s 0.00000D+00\n'\
                               %(i*3+j+1+snum,xyzStr[j],out.nscode[i][0],str(out.mjd[xyzP][i][6])[2:4],out.mjd[xyzP][i][7],out.mjd[xyzP][i][8],posit.replace('E', 'D')))
        snum += (i+1)*3


    souRefMJD = (scanInfo.scanMJD[0]+scanInfo.scanMJD[-1])/2
    souy, soum, soud, souh, soumi, sous = mjd2date(souRefMJD)
    soudoy = date2doy(souy, soum, soud)
    sousec = souh*3600 + soumi*60 + sous

    souP = out.param.index('sou') - len(out.param)
    #sourceID = scanInfo.estSou
    
    if param.Flags.sou[0] == 'YES':
        radeStr = ['RS_RA','RS_DE']
        
        for i in range(len(out.souName)):
            for j in range(2):
                rade = '%17.14E'%(out.aprioriValue[souP][i,j])
                
                fid.writelines('%6d %s  %04d  A    1 %2s:%03d:%05d rad  2 %21s 0.00000D+00\n'%(snum+i*2+j+1,radeStr[j],i+1,\
                                                                                              str(souy)[2:4],soudoy,sousec,\
                                                                                                rade.replace('E','D')))
        snum += (i+1)*2        
        
    fid.writelines('-SOLUTION/APRIORI\n'+\
                   '*\n* -----------------------------------------------------------------------------\n*\n'+\
                   '+SOLUTION/ESTIMATE\n'+\
                   '*Index TYPE__ CODE PT SBIN Ref_epoch___ Unit S Total_value__________ Formal_erro\n')
        
    # SOLUTION/ESTIMATE
    snum = 0
    for i in range(len(estParamP[0])):
        for j in range(len(out.mjd[estParamP[0][i]])):
            eopy,eopm,eopd,eoph,eopmi,eops = mjd2date(out.mjd[estParamP[0][i]][j])
            eopdoy = date2doy(eopy,eopm,eopd)
            eopSec = (out.mjd[estParamP[0][i]][j]-int(out.mjd[estParamP[0][i]][j]))*86400
            
            paramStr = '%17.14E'%(out.aprioriValue[estParamP[0][i]][j] + out.estValue[estParamP[0][i]][j])
            errStr = '%7.5E'%(out.formalErr[estParamP[0][i]][j])
            fid.writelines('%6d %-5s  ----  -    1 %2s:%03d:%05d %-4s 2 %21s %11s\n'\
                           %(snum+1, out.snxName[estParamP[0][i]], str(eopy)[2:4],eopdoy,eopSec, out.unit[estParamP[0][i]], \
                             paramStr.replace('E','D'), errStr.replace('E','D')))
            snum += 1
    
    startP = sum(result.paramNum[:xyzP])
    if param.Flags.xyz[0] == 'YES':
        xyzStr = ['STAX','STAY','STAZ']
        for i in range(len(out.nscode)):  
            for j in range(3):
                posit = '%17.14E'%(out.aprioriValue[xyzP][i,j] + result.para[startP+i*3+j])
                err = '%7.5E'%(result.err[startP+i*3+j])
                
                fid.writelines('%6d %s   %4s  A    1 %2s:%03d:%05d m    2 %21s %11s\n'\
                               %(i*3+j+1+snum,xyzStr[j],out.nscode[i][0],str(out.mjd[xyzP][i][6])[2:4],out.mjd[xyzP][i][7],out.mjd[xyzP][i][8],\
                                 posit.replace('E', 'D'),err.replace('E', 'D')))
        snum += (i+1)*3
    
    
    
    startP = sum(result.paramNum[:souP])

    if param.Flags.sou[0] == 'YES':
        for i in range(len(out.souName)):
            #index = out.souName.index(soutSortName[i])
            for j in range(2):
                rade = '%17.14E'%(out.aprioriValue[souP][i,j]+result.para[startP+i*2+j])
                err = '%7.5E'%(result.err[startP+i*2+j])
                #fid.writelines('%6d %s  %04d  A    1 %2d:%03d:%05d rad  2 %21.14f 0.00000D+00\n'%(i*3+j+1,radeStr[j],nsCode[i][0]))
                fid.writelines('%6d %s  %04d  A    1 %2s:%03d:%05d rad  2 %21s %11s\n'%(snum+i*2+j+1,radeStr[j],i+1,\
                                                                                        str(souy)[2:4],soudoy,sousec,\
                               rade.replace('E', 'D'),err.replace('E', 'D')))
        snum += (i+1)*2
        
    fid.writelines('-SOLUTION/ESTIMATE\n'+\
                   '*\n* -----------------------------------------------------------------------------\n*\n'+\
                   '+SOLUTION/NORMAL_EQUATION_VECTOR\n'+\
                   '*Index TYPE__ CODE Pt Soln Ref_epoch___ Unit S RightHandSideVector_b\n')
        
    # SOLUTION/NORMAL_EQUATION_VECTOR
    snum = 0
    for i in range(len(estParamP[0])):
        for j in range(len(out.mjd[estParamP[0][i]])):
            eopy,eopm,eopd,eoph,eopmi,eops = mjd2date(out.mjd[estParamP[0][i]][j])
            eopdoy = date2doy(eopy,eopm,eopd)
            eopSec = (out.mjd[estParamP[0][i]][j]-int(out.mjd[estParamP[0][i]][j]))*86400
            
            bStr = '%17.14E'%(result.bsnx[i+j])
            fid.writelines('%6d %-5s  ----  -    1 %2s:%03d:%05d %-4s 2 %21s\n'\
                           %(snum+1, out.snxName[estParamP[0][i]], str(eopy)[2:4],eopdoy,eopSec, out.unit[estParamP[0][i]], bStr.replace('E','D')))
            snum += 1
        
    # startP = sum(result.paramNum[2:xyzP])
    if param.Flags.xyz[0] == 'YES':
        xyzStr = ['STAX','STAY','STAZ']
        for i in range(len(out.nscode)):
           for j in range(3):
               bstr = '%17.14E'%(result.bsnx[snum+3*i+j])
               fid.writelines('%6d %s   %4s  A    1 %2s:%03d:%05d m    2 %21s\n'\
                               %(i*3+j+1+snum,xyzStr[j],out.nscode[i][0], str(out.mjd[xyzP][i][6])[2:4],out.mjd[xyzP][i][7],out.mjd[xyzP][i][8],\
                                 bstr.replace('E', 'D')))
        snum += (i+1)*3

    if param.Flags.sou[0] == 'YES':
        for i in range(len(out.souName)):
            for j in range(2):
                bstr = '%17.14E' % (result.bsnx[snum + 2 * i + j])
                fid.writelines('%6d %s  %04d  A    1 %2s:%03d:%05d rad  2 %21s\n' \
                               % (i * 2 + j + 1 + snum, radeStr[j], i+1, str(souy)[2:4],
                                  soudoy, sousec,bstr.replace('E', 'D')))
        snum += (i + 1) * 2
        
   
    fid.writelines('-SOLUTION/NORMAL_EQUATION_VECTOR\n'+\
                   '*\n* -----------------------------------------------------------------------------\n*\n'+\
                   '+SOLUTION/NORMAL_EQUATION_MATRIX L\n'+\
                   '*Row__ Col__ Norm_Equ_Matrix_Value Norm_Equ_Matrix_Value2 Norm_Equ_Matrix_Value3\n')
    
    blank = '                      '
    for i in range(result.Nsnx.shape[0]):
        k = (i+1)/3
        
        if k <= 1:
            nstr = ''
            for j in range(i+1):
                nstr += '%22s'%('%16.13E  '%(result.Nsnx[i,j]))
            fid.writelines('%6d%6d  %s\n'\
                           %(i+1,1, nstr[:-2].replace('E', 'D')))
        else:
            for m in range(int(k)):
                nstr = ''
                for n in range(3):
                    nstr += '%22s'%('%16.13E  '%(result.Nsnx[i,3*m+n]))
                fid.writelines('%6d%6d  %s\n'\
                               %(i+1,3*m+1, nstr[:-2].replace('E', 'D')))
            if int(k) - k != 0:
                nstr = ''
                for n in range(3*(m+1),i+1):
                    nstr += '%22s'%('%16.13E  '%(result.Nsnx[i,n]))
                fid.writelines('%6d%6d  %s\n'\
                               %(i+1,3*(m+1)+1, nstr[:-2].replace('E', 'D')))
                
    fid.writelines('-SOLUTION/NORMAL_EQUATION_MATRIX L\n'+\
                   '*\n* -----------------------------------------------------------------------------\n*\n'+\
                   '%ENDSNX')
    fid.close()